{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5001/api';\n\n// Create axios instance\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Request interceptor to add auth token\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Response interceptor to handle auth errors\napi.interceptors.response.use(response => response, error => {\n  var _error$response;\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n    localStorage.removeItem('token');\n    window.location.href = '/login';\n  }\n  return Promise.reject(error);\n});\n\n// Auth API\nexport const authAPI = {\n  login: credentials => api.post('/auth/login', credentials),\n  register: userData => api.post('/auth/register', userData),\n  getCurrentUser: () => api.get('/auth/me'),\n  logout: () => api.post('/auth/logout'),\n  forgotPassword: email => api.post('/auth/forgot-password', {\n    email\n  }),\n  resetPassword: (token, password) => api.post('/auth/reset-password', {\n    token,\n    password\n  })\n};\n\n// Lesson API\nexport const lessonAPI = {\n  getModules: () => api.get('/lessons/modules'),\n  getModule: moduleId => api.get(`/lessons/modules/${moduleId}`),\n  getLesson: (moduleId, lessonId) => api.get(`/lessons/modules/${moduleId}/lessons/${lessonId}`),\n  getExercise: (moduleId, exerciseId) => api.get(`/lessons/modules/${moduleId}/exercises/${exerciseId}`),\n  getProject: (moduleId, projectId) => api.get(`/lessons/modules/${moduleId}/projects/${projectId}`),\n  runTests: (code, tests) => api.post('/lessons/run-tests', {\n    code,\n    tests\n  }),\n  submitExercise: (moduleId, exerciseId, code, testResults) => api.post(`/lessons/modules/${moduleId}/exercises/${exerciseId}/submit`, {\n    code,\n    testResults\n  }),\n  submitProject: (moduleId, projectId, code, testResults) => api.post(`/lessons/modules/${moduleId}/projects/${projectId}/submit`, {\n    code,\n    testResults\n  }),\n  getHint: (moduleId, exerciseId, hintIndex) => api.get(`/lessons/modules/${moduleId}/exercises/${exerciseId}/hints/${hintIndex}`)\n};\n\n// Progress API\nexport const progressAPI = {\n  getUserProgress: () => api.get('/progress'),\n  updateProgress: progressData => api.put('/progress', progressData),\n  completeLesson: (moduleId, lessonId, timeSpent) => api.post('/progress/lessons', {\n    moduleId,\n    lessonId,\n    timeSpent\n  }),\n  completeExercise: (moduleId, exerciseId, code, testResults, timeSpent, attempts) => api.post('/progress/exercises', {\n    moduleId,\n    exerciseId,\n    code,\n    testResults,\n    timeSpent,\n    attempts\n  }),\n  completeProject: (moduleId, projectId, code, testResults, timeSpent) => api.post('/progress/projects', {\n    moduleId,\n    projectId,\n    code,\n    testResults,\n    timeSpent\n  }),\n  getLeaderboard: () => api.get('/progress/leaderboard'),\n  getAchievements: () => api.get('/progress/achievements'),\n  getStats: () => api.get('/progress/stats')\n};\n\n// User API\nexport const userAPI = {\n  getProfile: () => api.get('/users/profile'),\n  updateProfile: userData => api.put('/users/profile', userData),\n  uploadAvatar: file => {\n    const formData = new FormData();\n    formData.append('avatar', file);\n    return api.post('/users/avatar', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n  },\n  changePassword: (currentPassword, newPassword) => api.put('/users/password', {\n    currentPassword,\n    newPassword\n  }),\n  deleteAccount: () => api.delete('/users/account')\n};\n\n// Blockchain API\nexport const blockchainAPI = {\n  getNetworkInfo: () => api.get('/blockchain/network'),\n  deployContract: (contractCode, constructorArgs) => api.post('/blockchain/deploy', {\n    contractCode,\n    constructorArgs\n  }),\n  callContract: (contractAddress, method, args) => api.post('/blockchain/call', {\n    contractAddress,\n    method,\n    args\n  }),\n  getTransaction: txHash => api.get(`/blockchain/transactions/${txHash}`),\n  getBalance: address => api.get(`/blockchain/balance/${address}`),\n  sendTransaction: (to, amount, data) => api.post('/blockchain/send', {\n    to,\n    amount,\n    data\n  })\n};\n\n// Code Execution API\nexport const codeExecutionAPI = {\n  executeJavaScript: code => api.post('/code/execute/javascript', {\n    code\n  }),\n  executeSolidity: (code, testCases) => api.post('/code/execute/solidity', {\n    code,\n    testCases\n  }),\n  validateCode: (code, language) => api.post('/code/validate', {\n    code,\n    language\n  }),\n  formatCode: (code, language) => api.post('/code/format', {\n    code,\n    language\n  })\n};\nexport default api;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","_error$response","status","removeItem","window","location","href","authAPI","login","credentials","post","register","userData","getCurrentUser","get","logout","forgotPassword","email","resetPassword","password","lessonAPI","getModules","getModule","moduleId","getLesson","lessonId","getExercise","exerciseId","getProject","projectId","runTests","code","tests","submitExercise","testResults","submitProject","getHint","hintIndex","progressAPI","getUserProgress","updateProgress","progressData","put","completeLesson","timeSpent","completeExercise","attempts","completeProject","getLeaderboard","getAchievements","getStats","userAPI","getProfile","updateProfile","uploadAvatar","file","formData","FormData","append","changePassword","currentPassword","newPassword","deleteAccount","delete","blockchainAPI","getNetworkInfo","deployContract","contractCode","constructorArgs","callContract","contractAddress","method","args","getTransaction","txHash","getBalance","address","sendTransaction","to","amount","data","codeExecutionAPI","executeJavaScript","executeSolidity","testCases","validateCode","language","formatCode"],"sources":["/Users/harshraj/TeachBlockchain/client/src/services/api.ts"],"sourcesContent":["import axios from 'axios';\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5001/api';\n\n// Create axios instance\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Request interceptor to add auth token\napi.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n// Response interceptor to handle auth errors\napi.interceptors.response.use(\n  (response) => response,\n  (error) => {\n    if (error.response?.status === 401) {\n      localStorage.removeItem('token');\n      window.location.href = '/login';\n    }\n    return Promise.reject(error);\n  }\n);\n\n// Auth API\nexport const authAPI = {\n  login: (credentials: { email: string; password: string }) =>\n    api.post('/auth/login', credentials),\n  \n  register: (userData: { name: string; email: string; password: string }) =>\n    api.post('/auth/register', userData),\n  \n  getCurrentUser: () =>\n    api.get('/auth/me'),\n  \n  logout: () =>\n    api.post('/auth/logout'),\n  \n  forgotPassword: (email: string) =>\n    api.post('/auth/forgot-password', { email }),\n  \n  resetPassword: (token: string, password: string) =>\n    api.post('/auth/reset-password', { token, password }),\n};\n\n// Lesson API\nexport const lessonAPI = {\n  getModules: () =>\n    api.get('/lessons/modules'),\n  \n  getModule: (moduleId: string) =>\n    api.get(`/lessons/modules/${moduleId}`),\n  \n  getLesson: (moduleId: string, lessonId: string) =>\n    api.get(`/lessons/modules/${moduleId}/lessons/${lessonId}`),\n  \n  getExercise: (moduleId: string, exerciseId: string) =>\n    api.get(`/lessons/modules/${moduleId}/exercises/${exerciseId}`),\n  \n  getProject: (moduleId: string, projectId: string) =>\n    api.get(`/lessons/modules/${moduleId}/projects/${projectId}`),\n  \n  runTests: (code: string, tests: any[]) =>\n    api.post('/lessons/run-tests', { code, tests }),\n  \n  submitExercise: (moduleId: string, exerciseId: string, code: string, testResults: any[]) =>\n    api.post(`/lessons/modules/${moduleId}/exercises/${exerciseId}/submit`, { code, testResults }),\n  \n  submitProject: (moduleId: string, projectId: string, code: string, testResults: any[]) =>\n    api.post(`/lessons/modules/${moduleId}/projects/${projectId}/submit`, { code, testResults }),\n  \n  getHint: (moduleId: string, exerciseId: string, hintIndex: number) =>\n    api.get(`/lessons/modules/${moduleId}/exercises/${exerciseId}/hints/${hintIndex}`),\n};\n\n// Progress API\nexport const progressAPI = {\n  getUserProgress: () =>\n    api.get('/progress'),\n  \n  updateProgress: (progressData: any) =>\n    api.put('/progress', progressData),\n  \n  completeLesson: (moduleId: string, lessonId: string, timeSpent: number) =>\n    api.post('/progress/lessons', { moduleId, lessonId, timeSpent }),\n  \n  completeExercise: (moduleId: string, exerciseId: string, code: string, testResults: any[], timeSpent: number, attempts: number) =>\n    api.post('/progress/exercises', { moduleId, exerciseId, code, testResults, timeSpent, attempts }),\n  \n  completeProject: (moduleId: string, projectId: string, code: string, testResults: any[], timeSpent: number) =>\n    api.post('/progress/projects', { moduleId, projectId, code, testResults, timeSpent }),\n  \n  getLeaderboard: () =>\n    api.get('/progress/leaderboard'),\n  \n  getAchievements: () =>\n    api.get('/progress/achievements'),\n  \n  getStats: () =>\n    api.get('/progress/stats'),\n};\n\n// User API\nexport const userAPI = {\n  getProfile: () =>\n    api.get('/users/profile'),\n  \n  updateProfile: (userData: any) =>\n    api.put('/users/profile', userData),\n  \n  uploadAvatar: (file: File) => {\n    const formData = new FormData();\n    formData.append('avatar', file);\n    return api.post('/users/avatar', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data',\n      },\n    });\n  },\n  \n  changePassword: (currentPassword: string, newPassword: string) =>\n    api.put('/users/password', { currentPassword, newPassword }),\n  \n  deleteAccount: () =>\n    api.delete('/users/account'),\n};\n\n// Blockchain API\nexport const blockchainAPI = {\n  getNetworkInfo: () =>\n    api.get('/blockchain/network'),\n  \n  deployContract: (contractCode: string, constructorArgs: any[]) =>\n    api.post('/blockchain/deploy', { contractCode, constructorArgs }),\n  \n  callContract: (contractAddress: string, method: string, args: any[]) =>\n    api.post('/blockchain/call', { contractAddress, method, args }),\n  \n  getTransaction: (txHash: string) =>\n    api.get(`/blockchain/transactions/${txHash}`),\n  \n  getBalance: (address: string) =>\n    api.get(`/blockchain/balance/${address}`),\n  \n  sendTransaction: (to: string, amount: string, data?: string) =>\n    api.post('/blockchain/send', { to, amount, data }),\n};\n\n// Code Execution API\nexport const codeExecutionAPI = {\n  executeJavaScript: (code: string) =>\n    api.post('/code/execute/javascript', { code }),\n  \n  executeSolidity: (code: string, testCases: any[]) =>\n    api.post('/code/execute/solidity', { code, testCases }),\n  \n  validateCode: (code: string, language: string) =>\n    api.post('/code/validate', { code, language }),\n  \n  formatCode: (code: string, language: string) =>\n    api.post('/code/format', { code, language }),\n};\n\nexport default api;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}