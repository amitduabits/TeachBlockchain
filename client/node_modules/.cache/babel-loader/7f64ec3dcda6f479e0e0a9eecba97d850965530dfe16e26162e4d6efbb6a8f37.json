{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nconst initialState = {\n  sidebarOpen: true,\n  theme: 'light',\n  codeEditorTheme: 'vs-light',\n  fontSize: 14,\n  tabSize: 2,\n  wordWrap: true,\n  minimap: true,\n  notifications: [],\n  modals: {\n    login: false,\n    register: false,\n    settings: false,\n    help: false\n  },\n  loading: {\n    global: false,\n    lesson: false,\n    exercise: false,\n    tests: false\n  }\n};\nconst uiSlice = createSlice({\n  name: 'ui',\n  initialState,\n  reducers: {\n    toggleSidebar: state => {\n      state.sidebarOpen = !state.sidebarOpen;\n    },\n    setSidebarOpen: (state, action) => {\n      state.sidebarOpen = action.payload;\n    },\n    setTheme: (state, action) => {\n      state.theme = action.payload;\n      state.codeEditorTheme = action.payload === 'dark' ? 'vs-dark' : 'vs-light';\n    },\n    setCodeEditorTheme: (state, action) => {\n      state.codeEditorTheme = action.payload;\n    },\n    setFontSize: (state, action) => {\n      state.fontSize = action.payload;\n    },\n    setTabSize: (state, action) => {\n      state.tabSize = action.payload;\n    },\n    setWordWrap: (state, action) => {\n      state.wordWrap = action.payload;\n    },\n    setMinimap: (state, action) => {\n      state.minimap = action.payload;\n    },\n    addNotification: (state, action) => {\n      const notification = {\n        ...action.payload,\n        id: Date.now().toString(),\n        timestamp: new Date()\n      };\n      state.notifications.push(notification);\n    },\n    removeNotification: (state, action) => {\n      state.notifications = state.notifications.filter(n => n.id !== action.payload);\n    },\n    clearNotifications: state => {\n      state.notifications = [];\n    },\n    openModal: (state, action) => {\n      state.modals[action.payload] = true;\n    },\n    closeModal: (state, action) => {\n      state.modals[action.payload] = false;\n    },\n    closeAllModals: state => {\n      Object.keys(state.modals).forEach(key => {\n        state.modals[key] = false;\n      });\n    },\n    setLoading: (state, action) => {\n      state.loading[action.payload.type] = action.payload.value;\n    },\n    setGlobalLoading: (state, action) => {\n      state.loading.global = action.payload;\n    }\n  }\n});\nexport const {\n  toggleSidebar,\n  setSidebarOpen,\n  setTheme,\n  setCodeEditorTheme,\n  setFontSize,\n  setTabSize,\n  setWordWrap,\n  setMinimap,\n  addNotification,\n  removeNotification,\n  clearNotifications,\n  openModal,\n  closeModal,\n  closeAllModals,\n  setLoading,\n  setGlobalLoading\n} = uiSlice.actions;\nexport default uiSlice.reducer;","map":{"version":3,"names":["createSlice","initialState","sidebarOpen","theme","codeEditorTheme","fontSize","tabSize","wordWrap","minimap","notifications","modals","login","register","settings","help","loading","global","lesson","exercise","tests","uiSlice","name","reducers","toggleSidebar","state","setSidebarOpen","action","payload","setTheme","setCodeEditorTheme","setFontSize","setTabSize","setWordWrap","setMinimap","addNotification","notification","id","Date","now","toString","timestamp","push","removeNotification","filter","n","clearNotifications","openModal","closeModal","closeAllModals","Object","keys","forEach","key","setLoading","type","value","setGlobalLoading","actions","reducer"],"sources":["/Users/harshraj/TeachBlockchain/client/src/store/slices/uiSlice.ts"],"sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit';\n\ninterface UIState {\n  sidebarOpen: boolean;\n  theme: 'light' | 'dark';\n  codeEditorTheme: 'vs-light' | 'vs-dark';\n  fontSize: number;\n  tabSize: number;\n  wordWrap: boolean;\n  minimap: boolean;\n  notifications: Notification[];\n  modals: {\n    login: boolean;\n    register: boolean;\n    settings: boolean;\n    help: boolean;\n  };\n  loading: {\n    global: boolean;\n    lesson: boolean;\n    exercise: boolean;\n    tests: boolean;\n  };\n}\n\ninterface Notification {\n  id: string;\n  type: 'success' | 'error' | 'warning' | 'info';\n  title: string;\n  message: string;\n  duration?: number;\n  timestamp: Date;\n}\n\nconst initialState: UIState = {\n  sidebarOpen: true,\n  theme: 'light',\n  codeEditorTheme: 'vs-light',\n  fontSize: 14,\n  tabSize: 2,\n  wordWrap: true,\n  minimap: true,\n  notifications: [],\n  modals: {\n    login: false,\n    register: false,\n    settings: false,\n    help: false,\n  },\n  loading: {\n    global: false,\n    lesson: false,\n    exercise: false,\n    tests: false,\n  },\n};\n\nconst uiSlice = createSlice({\n  name: 'ui',\n  initialState,\n  reducers: {\n    toggleSidebar: (state) => {\n      state.sidebarOpen = !state.sidebarOpen;\n    },\n    setSidebarOpen: (state, action: PayloadAction<boolean>) => {\n      state.sidebarOpen = action.payload;\n    },\n    setTheme: (state, action: PayloadAction<'light' | 'dark'>) => {\n      state.theme = action.payload;\n      state.codeEditorTheme = action.payload === 'dark' ? 'vs-dark' : 'vs-light';\n    },\n    setCodeEditorTheme: (state, action: PayloadAction<'vs-light' | 'vs-dark'>) => {\n      state.codeEditorTheme = action.payload;\n    },\n    setFontSize: (state, action: PayloadAction<number>) => {\n      state.fontSize = action.payload;\n    },\n    setTabSize: (state, action: PayloadAction<number>) => {\n      state.tabSize = action.payload;\n    },\n    setWordWrap: (state, action: PayloadAction<boolean>) => {\n      state.wordWrap = action.payload;\n    },\n    setMinimap: (state, action: PayloadAction<boolean>) => {\n      state.minimap = action.payload;\n    },\n    addNotification: (state, action: PayloadAction<Omit<Notification, 'id' | 'timestamp'>>) => {\n      const notification: Notification = {\n        ...action.payload,\n        id: Date.now().toString(),\n        timestamp: new Date(),\n      };\n      state.notifications.push(notification);\n    },\n    removeNotification: (state, action: PayloadAction<string>) => {\n      state.notifications = state.notifications.filter(n => n.id !== action.payload);\n    },\n    clearNotifications: (state) => {\n      state.notifications = [];\n    },\n    openModal: (state, action: PayloadAction<keyof UIState['modals']>) => {\n      state.modals[action.payload] = true;\n    },\n    closeModal: (state, action: PayloadAction<keyof UIState['modals']>) => {\n      state.modals[action.payload] = false;\n    },\n    closeAllModals: (state) => {\n      Object.keys(state.modals).forEach(key => {\n        state.modals[key as keyof UIState['modals']] = false;\n      });\n    },\n    setLoading: (state, action: PayloadAction<{ type: keyof UIState['loading']; value: boolean }>) => {\n      state.loading[action.payload.type] = action.payload.value;\n    },\n    setGlobalLoading: (state, action: PayloadAction<boolean>) => {\n      state.loading.global = action.payload;\n    },\n  },\n});\n\nexport const {\n  toggleSidebar,\n  setSidebarOpen,\n  setTheme,\n  setCodeEditorTheme,\n  setFontSize,\n  setTabSize,\n  setWordWrap,\n  setMinimap,\n  addNotification,\n  removeNotification,\n  clearNotifications,\n  openModal,\n  closeModal,\n  closeAllModals,\n  setLoading,\n  setGlobalLoading,\n} = uiSlice.actions;\n\nexport default uiSlice.reducer;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}